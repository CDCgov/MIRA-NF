/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    cdcgov/mira-nf Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {
    input                      = null
    runpath                          = null
    e                          = null
    p                          = null
    custom_primers                          = null
    primer_kmer_len                          = null
    primer_restrict_window                          = null
    process_q                          = null
    reformat_tables                          = false
    subsample_reads                          = 0
    irma_module                          = 'none'
    custom_irma_config                          = null
    custom_qc_settings                          = null
    amd_platform                          = false
    sourcepath                          = null
    read_qc                          = false
    ecr_registry                          = null
    restage                          = false
    variants_of_interest                          = null
    reference_seq_table                          = null
    dais_module                          = null
    email                      = null
    monochrome_logs              = false
    help                         = false
    help_full                    = false
    show_hidden                  = false
    version                      = false
    pipelines_testdata_base_path = 'https://raw.githubusercontent.com/nf-core/test-datasets/'
    trace_report_suffix          = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')// Config options
    config_profile_name        = null
    config_profile_description = null
    publish_dir_mode           = 'copy'

    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_contact     = null
    config_profile_url         = null

    // MultiQC options
    multiqc_config             = null
    multiqc_title              = null
    multiqc_logo               = null
    max_multiqc_email_size     = '25.MB'
    multiqc_methods_description = null

    // Schema validation default options
    validate_params            = true
}



process {
    // TODO nf-core: Check the defaults for all processes
    cpus   = { 1    * task.attempt }
    memory = { 6.GB * task.attempt }
    time   = { 4.h  * task.attempt }

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'
}

profiles {
    debug {
        dumpHashes              = true
        process.beforeScript    = 'echo $HOSTNAME'
        cleanup                 = false
        nextflow.enable.configProcessNamesValidation = true
    }
    docker {
        docker.enabled         = true
        conda.enabled          = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
        docker.runOptions      = '-u $(id -u):$(id -g)'

        //module config
        includeConfig 'conf/modules_docker.config'
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        conda.enabled          = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false

        //module config
        includeConfig 'conf/modules.config'

        // Set cache directory for Singularity images.
        singularity.cacheDir = "$HOME/singularityIMG"

        // Prevents mounting errors in Singularity container creation caused by bad TMPDIR creation.
        process {
        scratch = false
        }
    }
    podman {
        podman.enabled          = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }

    gitpod {
        executor.name          = 'local'
        executor.cpus          = 4
        executor.memory        = 8.GB
    }
    sge {
        // Load configs
        includeConfig 'conf/sge_slurm.config'

        executor {
        name = 'sge'
        queueSize = 16
        pollInterval = '10sec'
        submitRateLimit = '2sec'
        }
        process {
        // Executor information
        executor = 'sge'
        jobName = { "$task.name - $task.hash" }
        penv = 'smp'
        queue = "${params.process_q}"
        }
    }
    slurm {
        // Load configs
        includeConfig 'conf/sge_slurm.config'

        process.executor = 'slurm'
        executor.queueSize = 16
        executor.perCpuMemAllocation = true
        singularity.runOptions = '--bind /scratch:/scratch'
        cleanup = true
    }

    local {
        // Load local_base.config and modules
        includeConfig 'conf/local_base.config'
    }
    standard {
        docker.enabled         = true
        conda.enabled          = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
        docker.runOptions      = '-u $(id -u):$(id -g)'
        includeConfig 'conf/omics.config'
        params {
            restage = true
        }
    }

    test { includeConfig 'conf/test.config'}
    //test_full { includeConfig 'conf/test_full.config' }
}

// Load nf-core custom profiles from different Institutions
includeConfig !System.getenv('NXF_OFFLINE') && params.custom_config_base ? "${params.custom_config_base}/nfcore_custom.config" : "/dev/null"


// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    // Sets options for the Java runtime instance.
    NFX_OPTS="-Xms=512m -Xmx=8g"
}

// Set bash options
process.shell = [
    "bash",
    "-C",         // No clobber - prevent output redirection from overwriting files.
    "-e",         // Exit if a tool returns a non-zero status/exit code
    "-u",         // Treat unset variables and parameters as an error
    "-o",         // Returns the status of the last command to exit..
    "pipefail"    //   ..with a non-zero status or zero if all successfully execute
]

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    =  "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'cdcgov/mira-nf'
    author          = """Ben Rambo-Martin, Amanda Sullivan, Kristine Lacek and Reina Chau.""" // The author field is deprecated from Nextflow version 24.10.0, use contributors instead
    contributors    = [
        // TODO nf-core: Update the field with the details of the contributors to your pipeline. New with Nextflow version 24.10.0
        [
            name: 'Ben Rambo-Martin',
            affiliation: 'CDC',
            email: '',
            github: '',
            contribution: ['author'], // List of contribution types ('author', 'maintainer' or 'contributor')
            orcid: ''
        ],
        [
            name: 'Amanda Sullivan',
            affiliation: 'CDC',
            email: 'xpa3@cdc.gov',
            github: '@mandysulli',
            contribution: ['maintainer','author'],
            orcid: ''
        ],
        [
            name: 'Kristine Lacek',
            affiliation: '',
            email: '',
            github: '',
            contribution: ['author'],
            orcid: ''
        ],
        [
            name: 'Reina Chau',
            affiliation: '',
            email: '',
            github: '',
            contribution: ['author'],
            orcid: ''
        ],
        [
            name: 'Sam Wiley',
            affiliation: '',
            email: '',
            github: '',
            contribution: ['contributor'],
            orcid: ''
        ],
    ]
    homePage        = 'https://github.com/cdcgov/mira-nf'
    description     = """mira-nf is a bioinformatics pipeline that assembles Influenza genomes, SARS-CoV-2 genomes, the SARS-CoV-2 spike-gene and RSV genomes when given the raw fastq files and a samplesheet. mira-nf can analyze reads from both Illumina and OxFord Nanopore sequencing machines."""
    mainScript      = 'main.nf'
    defaultBranch   = 'master'
    nextflowVersion = '!>=24.04.2'
    version         = '1.0.0dev'
    doi             = ''
}

// Nextflow plugins
plugins {
    id 'nf-schema@2.3.0' // Validation of pipeline parameters and creation of an input channel from a sample sheet
}

validation {
    defaultIgnoreParams = ["genomes"]
    monochromeLogs = params.monochrome_logs
    help {
        enabled = true
        command = "nextflow run cdcgov/mira-nf -profile <docker/singularity/.../institute> --input samplesheet.csv --outdir <OUTDIR>"
        fullParameter = "help_full"
        showHiddenParameter = "show_hidden"
    }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
